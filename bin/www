require("dotenv").config();
var { app } = require("../app"); // Import app correctly
var debug = require("debug")("Inspira:server");
var http = require("http");
var { Server } = require("socket.io");

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val; // Named pipe
  }

  if (port >= 0) {
    return port; // Port number
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

console.log("Server running on port " + port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = new Server(server);

// Attach socket.io to app
app.io = io;

io.on("connection", (socket) => {
  console.log("A user connected");

  socket.on("newComment", (data) => {
    io.emit("updateComments", data);
  });

  socket.on("newLike", (data) => {
    io.emit("updateLikes", data);
  });

  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
